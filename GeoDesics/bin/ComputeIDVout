#!/usr/bin/env perl
use strict;
use warnings FATAL=>'all';
use vars qw($opt_h $opt_datadir $opt_domaindir $opt_mapdir $opt_inputfilesdir
            $opt_h5prefix
            $opt_cA $opt_cB
            $ME $THISDIR);
use Getopt::Long;
use Carp;
use Cwd;
use List::Util qw(max);
use File::Basename;
# Load SpEC perl modules
use lib dirname(Cwd::abs_path(__FILE__));
use Utils;
use ComputeRequiredVout;

# We want to use $RealBin for finding executables to call using system
# calls.  But dirname(__FILE__) points to either a bin directory or a
# Support/Perl directory. If the former, then we use it.  If the
# latter, then there is always a Support/bin directory next to
# Support/Perl, and we want to use Support/bin because Support/bin
# contains things (like python scripts and SpEC executables) that are
# not in Support/Perl.  So "/../bin" does the trick for both cases.
my $RealBin = dirname(__FILE__) . "/../bin";

#--------------\
# Help message  >
#--------------/
sub Help {
    print STDERR <<"EoF";
    Computes the 'Vout' for SKS initial data, and changes the relevant
    files.  This should be run from within BBH_ID.py.
Usage: $ME [options] 
OPTIONS:
  --datadir   STRING    Location of data for ReadTensorsFromDiskWithMap
  --domaindir STRING    Location of Domain.input for ReadTensorsFromDiskWithMap
  --mapdir    STRING    Location of SpatialCoordMap.input
                           for ReadTensorsFromDiskWithMap.
  --inputfilesdir STRING Location of input files
  --h5prefix  STRING    Default $opt_h5prefix.
  --cA        STRING    Center A in grid coords, comma separated
  --cB        STRING    Center B in grid coords, comma separated
  --h                   Help. Print this table.
EoF
  exit(1);
}

#----------------------------------------------------------------
# Set 'ME' as name of the executable.
#----------------------------------------------------------------
$ME      = basename(__FILE__);
$THISDIR = `/bin/pwd`; chomp $THISDIR;

#-----------------
# Get options
#-----------------
$opt_h5prefix      = "Vars";
GetOptions('h'               => \$opt_h,
           'cA=s'            => \$opt_cA,
           'cB=s'            => \$opt_cB,
           'h5prefix=s'      => \$opt_h5prefix,
           'inputfilesdir=s' => \$opt_inputfilesdir,
           'mapdir=s'        => \$opt_mapdir,
           'domaindir=s'     => \$opt_domaindir,
           'datadir=s'       => \$opt_datadir,
           ) || Help(); Help() if $opt_h;
warn "Must specify --mapdir\n"    and Help() unless (defined $opt_mapdir);
warn "Must specify --domaindir\n" and Help() unless (defined $opt_domaindir);
warn "Must specify --datadir\n"   and Help() unless (defined $opt_datadir);
warn "Must specify --cA\n"        and Help() unless (defined $opt_cA);
warn "Must specify --cB\n"        and Help() unless (defined $opt_cB);
warn "Must specify --inputfilesdir\n" 
    and Help() unless (defined $opt_inputfilesdir);
Utils::MakePathsAbsolute(\$opt_mapdir,\$opt_domaindir,\$opt_datadir,
                         \$opt_inputfilesdir);

#-----------------
# Do something
#-----------------
my @val = MyComputeRequiredVout();

# Replace files
foreach my $label ("A","B") {
  my $v   = shift(@val);
  print $v,"\n";
  my $y00 = sqrt(0.25/3.14159265359);
  if($v>0.0) {
    # Vout is defined as the **outward** velocity that is necessary to
    # make the char speeds be positive.
    # However, the thing that goes into the Init_FuncLambdaFactor file
    # is dlambda00/dt, which is defined with a minus sign, i.e.
    # r_distorted = r_grid - lambda00*Y00
    my $voy00 = -$v/$y00;
    my $text  = "Time=0.0; Version=0; Tsaved=0.0; DerivOrder=3;YlmCoef(0,0)=0.0; dYlmCoef(0,0)=$voy00; d2YlmCoef(0,0)=0.0; d3YlmCoef(0,0)=0.0; Nc=1;\n";
    Utils::OverwriteFile("ID_Init_FuncLambdaFactor${label}0.txt",$text);
  }
}

#-----------------
# Subroutines
#-----------------
sub MyComputeRequiredVout {

  # Make directory to put stuff
  my $tempdir = "ComputeRequiredVout";
  mkdir($tempdir) || die "Cannot mkdir $tempdir";
  Utils::MakePathsAbsolute(\$tempdir);

  # Copy input files
  foreach my $file (glob "$opt_inputfilesdir/*.input") {
    my $basename=$file; $basename =~ s|.*/||;
    Utils::MyCopy($file,"$tempdir/$basename");
  }

  # Edit DoMultipleRuns to point to correct EvID and to not
  # require a bin directory.
  {
    my $text = Utils::ReadFile("$tempdir/DoMultipleRuns.input");
    $text    =~ s|ID/EvID|../EvID|;
    $text    =~ s|(RequireBinDir\s*=>\s*)1|${1}0|sg;
    Utils::OverwriteFile("$tempdir/DoMultipleRuns.input", $text)
  }

  # Run DoMultipleRuns for substitutions
  chdir($tempdir) || die "Cannot cd to $tempdir\n";
  Utils::System("$RealBin/DoMultipleRuns -n -B -i",1);

  # Figure out lev
  my $lev = undef;
  {
    my @levs=glob("Lev*"); # Should have been created by DoMultipleRuns.
    $lev = pop(@levs);     # Take latest in alphabetical order.
  }

  my @CenterString=($opt_cA,$opt_cB);
  my @val = ComputeRequiredVout(\@CenterString,0.0,$opt_h5prefix,0.001,
                                $opt_domaindir,$opt_mapdir,
                                $opt_datadir,
                                1,undef,
                                "$tempdir/$lev/GrDomain.input",
                                "$tempdir/$lev/SpatialCoordMap.input",
                                "$tempdir/$lev/RefinementOptionHistory.input",
                                );
  chdir($THISDIR) || die "Cannot chdir to $THISDIR\n";

  return @val;
}
