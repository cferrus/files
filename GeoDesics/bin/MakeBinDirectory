#!/usr/bin/env perl
require 5;
use strict;
use warnings FATAL => 'all';
use Cwd qw(realpath abs_path);
use File::Basename;
use Getopt::Long;
Getopt::Long::Configure("pass_through","no_ignore_case");
# Load SpEC perl modules
use lib dirname(Cwd::abs_path(__FILE__));
use SpEC;

my $ME = basename(__FILE__);

sub help {
    print STDERR <<"END";
Usage: $ME [options]
  This script is used to manually create a bin directory and a link named
  'SpEC' to the main executable in the current working directory.

  Typically, this should only be used when debugging runs. If you're
  continuing a run that was stopped/terminated and needs to be resubmitted,
  use MakeNextSegment instead (it will set up the next segment's work
  directory, including the bin directory).

  To get accurate help text, this script must be invoked from the same
  place as the intended -b option (or Support/bin related to -E option).

REQUIRED OPTIONS:
  -e PATH   Path to main executable to copy.
  -b PATH   Path to bin directory to copy.
    OR
  -E PATH   Path to main executable to copy. Must exist in a repository.
            Will copy the bin directory from Support/bin of this repository.
OPTIONAL OPTIONS:
  -n NAME   Name of created directory. Default './bin'.
  -L        Link bin directory contents instead of copying. Use with care!
  --hydro   Add hydro support executables/scripts to bin directory.
  -h        Help. Print this table.
END
}

# Define the realpath to the invoked script
my $me = realpath(__FILE__);

# Parse options
my @ORIG_ARGV = @ARGV;
my %args;
GetOptions(\%args, "h","hydro","b=s","e=s","L","E=s","n=s","recursive")
  or (help() and exit(1));
help() and exit(0) if ($args{"h"});
help() and die "\nMust specify (-b and -e) or -E!\n"
  unless (($args{'e'} and $args{'b'}) or $args{'E'});

# Determine source bin directory and executable
my ($source_bin, $source_exec);
if ($args{'e'}) {
  $source_exec = $args{'e'};
  $source_bin = $args{'b'};
} else {
  $source_exec = $args{'E'};
  my $exec_dir = dirname($source_exec);
  my $repo = `cd $exec_dir && git rev-parse --show-toplevel`;
  chomp($repo);
  die "\nIf using -E, exec must exist in a SpEC repository!\n" unless ($repo);
  $source_bin = "$repo/Support/bin";
}
my $name = $args{'n'} || "./bin";

# Reinvoke script from the bin directory for consistency (if necessary)
die "Source bin MakeBinDirectory '$source_bin/MakeBinDirectory' does not exist"
    if (not -e "$source_bin/MakeBinDirectory");
my $source_me = realpath("$source_bin/MakeBinDirectory");
unless ($me eq $source_me) {
  die "Aborting infinite recursion: me=$me, source_me=$source_me"
    if ($args{'recursive'});
  Utils::System("$source_me --recursive @ORIG_ARGV");
  exit(0);
}

# Make sure no extraneous command line args
help() and die "\nUnexpected command line arguments '@ARGV'\n" if (@ARGV);

# Make the bin directory in the cwd
SpEC::MakeBinDir($source_bin, $name, $source_exec, 1, $args{'L'},
                 $args{'hydro'});
print STDERR "$ME finished successfully.\n";
